import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
%matplotlib
Using matplotlib backend: Qt5Agg
x = np.linspace(0, 10, 30)
y1 = np.cos(x)
y2 = np.sin(x)
plt.plot(x, y1)
plt.plot(x, y2)
Out[3]: [<matplotlib.lines.Line2D at 0x7f48b0a01320>]
line1, line2 = plt.gca().lines
line1.set_linewidth(5)
plt.draw()
plt.setp(line2, linewidth=10)
plt.setp(line1, color='m')
mpl.colors.BASE_COLORS
Out[8]: {'b': (0, 0, 1),
         'c': (0, 0.75, 0.75),
         'g': (0, 0.5, 0),
         'k': (0, 0, 0),
         'm': (0.75, 0, 0.75),
         'r': (1, 0, 0),
         'w': (1, 1, 1),
         'y': (0.75, 0.75, 0)}
mpl.colors.cnames
Out[9]: {'aliceblue': '#F0F8FF', 'antiquewhite': '#FAEBD7', 'aqua': '#00FFFF',
         'aquamarine': '#7FFFD4', 'azure': '#F0FFFF', 'beige': '#F5F5DC',
         ...
         'violet': '#EE82EE', 'wheat': '#F5DEB3', 'white': '#FFFFFF',
         'whitesmoke': '#F5F5F5', 'yellow': '#FFFF00', 'yellowgreen': '#9ACD32'}
plt.setp(line2, color='seagreen')
plt.setp(line1, color='0.5')
plt.setp(line1, color='#FFC000')
plt.setp(line1, color=(0, 0.7, 1))
plt.setp(line1, color=mpl.colors.hsv_to_rgb((0.3, 1, 1)))
plt.setp(line2, color=mpl.colors.hsv_to_rgb((0.3, 1, 0.6)))
mpl.lines.Line2D.lineStyles
Out[15]: {'': '_draw_nothing',
          ' ': '_draw_nothing',
          '-': '_draw_solid',
          '--': '_draw_dashed',
          '-.': '_draw_dash_dot',
          ':': '_draw_dotted',
          'None': '_draw_nothing'}
plt.setp(line2, linestyle='--')
plt.setp(line2, dashes=(6, 2))
plt.setp(line2, dashes=(4, 2), dash_capstyle='round')
plt.cla()
xdata = np.array([0, 0.1, 0.5, 0.9, 1])
ydata = np.array([0, 0, 1, 0, 0])
for n in range(3):
    plt.plot(xdata, ydata+0.2*n)
line = plt.gca().lines
plt.setp(line, linewidth=20)
plt.ylim(0, 1.5)
for n, joinstyle in enumerate(('round', 'bevel', 'miter')):
    plt.setp(line[n], solid_joinstyle=joinstyle)
plt.cla()
plt.plot(x, y1, 'ro-')
plt.plot(x, y2, 'yD-')
Out[20]: [<matplotlib.lines.Line2D at 0x7f48b0110860>]
line1, line2 = plt.gca().lines
plt.getp(line1, 'markersize')
Out[22]: 6.0
plt.setp(line1, markersize=4)
plt.setp(line2, markersize=10)
mpl.lines.Line2D.markers
Out[24]: {'.': 'point', ',': 'pixel', 'o': 'circle', 'v': 'triangle_down',
          ...
          8: 'caretleftbase', 9: 'caretrightbase', 10: 'caretupbase',
          11: 'caretdownbase', 'None': 'nothing', None: 'nothing',
          ' ': 'nothing', '': 'nothing'}
plt.setp(line2, marker='s', markerfacecolor='b',
         markeredgewidth=3, markeredgecolor='r')
plt.xlabel('t', fontsize='x-large')
Out[26]: <matplotlib.text.Text at 0x7f48b0a30668>
plt.ylabel('cos(t), sin(t)', fontsize=30)
Out[27]: <matplotlib.text.Text at 0x7f48b015a780>
plt.xlabel('$t$')
plt.ylabel(r'$\cos(\omega t), \sin(\omega t)$')
Out[28]: <matplotlib.text.Text at 0x7f48b015a780>
mpl.rc('text', usetex = True)
plt.ylabel(r'$\cos(\omega t), \sin(\omega t)$')
Out[29]: <matplotlib.text.Text at 0x7f48b015a780>
plt.cla()
plt.plot(x, y1, 'o-', label='Kosinus')
plt.plot(x, y2, 's-', label='Sinus')
Out[30]: [<matplotlib.lines.Line2D at 0x7f48b09f9828>]
plt.legend()
Out[31]: <matplotlib.legend.Legend at 0x7f48af928080>
plt.legend(loc='upper right')
Out[32]: <matplotlib.legend.Legend at 0x7f48af946ba8>
plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)
Out[33]: <matplotlib.legend.Legend at 0x7f48af8d4780>
plt.xlim(4, 6)
Out[34]: (4, 6)
plt.xlim(0, 10)
Out[35]: (0, 10)
plt.yscale('log')
plt.grid(which='both')
plt.yscale('linear')
plt.xticks(np.pi*np.arange(0, 4), ('0', r'$\pi$', r'$2\pi$', r'$3\pi$'),
           size='x-large', color='r')
Out[38]: ([<matplotlib.axis.XTick at 0x7f48b0a011d0>,
  <matplotlib.axis.XTick at 0x7f48b0178908>,
  <matplotlib.axis.XTick at 0x7f48b016ada0>,
  <matplotlib.axis.XTick at 0x7f48af92f8d0>],
 <a list of 4 Text xticklabel objects>)
plt.savefig('example.png')
plt.savefig('example.pdf')
plt.clf()
x, y = np.mgrid[-3:3:100j, -3:3:100j]
z = (1-x+x**5+y**3)*np.exp(-x**2-y**2)
contourset = plt.contour(x, y, z)
plt.clabel(contourset, inline=1)
Out[44]: <a list of 8 text.Text objects>
plt.colorbar(contourset)
Out[45]: <matplotlib.colorbar.Colorbar at 0x7f48aeda8a20>
plt.clf()
contourset = plt.contour(x, y, z, [-0.25, 0, 0.25, 1])
plt.clabel(contourset, inline=1)
Out[46]: <a list of 4 text.Text objects>
plt.clf()
levels = 10
contourset = plt.contourf(x, y, z, levels, cmap='viridis')
plt.colorbar(contourset)
contourlines = plt.contour(x, y, z, levels, colors=('k',))
plt.clabel(contourlines, inline=1)
Out[47]: <a list of 11 text.Text objects>
tvals = np.linspace(0, 10, 200)
x0vals = np.exp(-0.2*tvals)*np.sin(3*tvals)
x1vals = tvals*np.exp(-tvals)
fig, (ax0, ax1) = plt.subplots(2, 1, figsize=(8, 5), sharex=True)
ax0.plot(tvals, x0vals)
ax1.plot(tvals, x1vals)
ax1.set_xlabel('$t$', size='xx-large')
ax0.set_ylabel('$x$', size='xx-large')
ax1.set_ylabel('$x$', size='xx-large')
Out[48]: <matplotlib.text.Text at 0x7f48aeb96278>
from mpl_toolkits.mplot3d import Axes3D
x, y = np.mgrid[-3:3:30j, -3:3:30j]
z = (x**2+y**3)*np.exp(-x**2-y**2)
cmap = 'coolwarm'

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cmap, alpha=0.5)
cset = ax.contourf(x, y, z, zdir='z', offset=-0.8, cmap=cmap)
ax.set_xlabel('$x$', size='xx-large')
ax.set_ylabel('$y$', size='xx-large')
ax.set_zlabel('$z$', size='xx-large')
ax.set_zlim(-0.8, 0.5)

plt.draw()
